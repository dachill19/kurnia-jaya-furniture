// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


enum Role {
  USER
  ADMIN
}

enum ProductStatus {
  PENDING
  SHIPPED
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  TRANSFER_BANK
  E_WALLET
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  phoneNumber     String    @unique
  password        String
  name            String
  role            Role      @default(USER)
  address         Address[]
  wishlist        Wishlist[]
  cart            Cart[]
  orders          Order[]
  reviews         Review[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Address {
  id              String    @id @default(uuid())
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  kota            String
  provinsi        String
  kodePos         String
  alamatLengkap   String 
  isDefault       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Category {
  id              String    @id @default(uuid())
  name            String    @unique 
  products        Product[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String
  price           Float
  discountPrice   Float?
  stock           Int       @default(0)
  category        Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId      String
  isHot           Boolean   @default(false)
  images          ProductImage[]
  cartItems       Cart[]
  wishlist        Wishlist[]
  orderItems      OrderItem[]
  reviews         Review[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model ProductImage {
  id              String    @id @default(uuid())
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       String
  imageUrl        String
  isMain          Boolean   @default(false)
  createdAt       DateTime  @default(now())
}

model Wishlist {
  id              String    @id @default(uuid())
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       String
  createdAt       DateTime  @default(now())

  @@unique([userId, productId])
}

model Cart {
  id              String    @id @default(uuid())
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       String
  quantity        Int       @default(1)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([userId, productId])
}

model Order {
  id              String    @id @default(uuid())
  orderNumber     String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  totalAmount     Float
  status          ProductStatus @default(PENDING)
  items           OrderItem[]
  payment         Payment?
  shipping        Shipping?
  customerRating  Int?      // (1-5)
  customerFeedback String?  
  orderSource     String    @default("WEBSITE")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model OrderItem {
  id              String    @id @default(uuid())
  order           Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         String
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       String
  quantity        Int
  price           Float
  review          Review?
}

model Payment {
  id              String    @id @default(uuid())
  order           Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         String    @unique
  amount          Float
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  transactionId   String?   // id transaksi payment gateway
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Shipping {
  id              String    @id @default(uuid())
  order           Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         String    @unique
  address         String
  estimatedDelivery DateTime? // sama
  status          ProductStatus @default(PENDING)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Review {
  id              String    @id @default(uuid())
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       String
  orderItem       OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  orderItemId     String    @unique
  rating          Int
  comment         String?
  reviewImages    ReviewImage[] 
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model ReviewImage {
  id              String    @id @default(uuid())
  review          Review    @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId        String
  imageUrl        String
  createdAt       DateTime  @default(now())
}